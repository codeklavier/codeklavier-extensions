# ======================================================
# mercury.ini
#
# Mercury extension for CodeKlavier
# ======================================================

# ======================================================
# Midi Setup

[midi]
# midi options of the device to use
port: 2

# IAC driver loopback:
# noteon_id: 144

# M-audio midi controller:
# noteon_id: 152
# noteoff_id: 128
# pedal_id: 184
# pedal_midi_sostenuto: 7

# Yamaha Clavinova:
noteon_id: 144
noteoff_id: 128
pedal_id: 176
pedal_midi_sostenuto: 66

# Casio keyboard:
# pedal_midi_sostenuto: 67

# ======================================================
# Mapping Mode 1-1

[Hello World]
# Just play a single note, not using.
# Could be useful to type in single numbers and non-alphanumeric characters

# simple alphanumeric & commands 1-1 mapping used Hello World module
# midinumber  :  alphanumeric or command mapping

# Basic keywords used in Mercury for different instruments and settings
# global settings
22: volume #in floatingpoint amplitude => 'set volume 0.9'
23: tempo #in bpm => 'set bpm 93'
25: scale #scalename and root => 'set scale minor Ab'
32: hipass #cutoff in Hz => 'set hipass 900'
33: lopass #cutoff in Hz => 'set lopass 900'
# start line with any of these 3 commands
39: new #make a synth or sample
42: set #change settings or methods for named-instruments
44: ring #create/transform lists for melody/rhythm etc.
# when line starts with 'new' -> choose instrument type
49: synth
50: sample
# when line starts with 'ring <aVarName>' -> choose generator
51: spreadInclusive() #spreadInclusive(5 0 12) => [0 3 6 9 12]
52: spread() #spread(5 0 12) => [0 2 4 7 9]
53: fill() #fill(10 2 20 3 30 1) => [10 10 20 20 20 30]
# these need a ring as first argument, because they transfrom
# eg. when 1 line up = 'ring myRing [1 2 3]'
54: palindrome() #palindrome(myRing) => [1 2 3 3 2 1]
56: clone() #clone(myRing 0 12 24) => [1 2 3 13 14 15 25 26 27]
57: join() #join(myRing myRing) => [1 2 3 1 2 3]
58: reverse() #reverse(myRing) => [3 2 1]
59: rotate() #rotate(myRing 1) => [2 3 1]
# when line starts with 'new synth' -> select waveshape
60: saw
61: square
62: triangle
63: sine
# when line starts with 'new sample' -> select sample
64: kick_909_dist
65: snare_dnb
66: hat_min
67: hat_min_open
68: kick_sub
70: clap_min
# use any of these methods on both sample/synth
71: gain() #volume of the synth/sample
73: time() #triggering speed (1/4, 1/8, 1/16, 1/12, 1=1bar etc.)
86: beat() #play-or-not-to-play (1 = play all times, 0.5 = 50% of the time)
88: shape() #envelope in ms, attack, decay
89: name() #name of the instrument to reference to with 'set'
# use this method on synth only
90: note() #the pitch where (0 0) = 36 (C2), (0 1) > 48, (7 0) > 43
# this method with any of the following keyword as argument for fx
91: fx()
92: reverb #fx(reverb 0.9 11) => 0.9=amplitude 11=length (0-20)
93: delay #fx(delay 5/16 3/16 0.8) => pingpong-delay 5/16=delaytimeL/R 0.8=feedback
95: double #fx(double) => Automated-Double-Tracking effect
96: drive #fx(drive 10) => soft-clipping overdrive 10=distort amount (0 - inf)
97: filter #fx(filter low 1000 0.8) => low=type (band/high/low), 1000=cutoff in Hz, 0.8 = resonance
98: lfo #fx(lfo 1/8) => Low frequency oscillator, 1/8=lfo speed in bar-division
# kill all the sound
105: killAll
108: down

# Toggles modes: 1-1 mapping OR motivic mapping
toggle: 107

# ======================================================
# Shortcuts
# 	first key that remains pressed, second key

[shortcuts]
eval: none
delete_line: alt, x
eval_manual: cmd, r
eval_manual2: alt, enter
jump_start: alt, up
jump_end: alt, down
jump_start_line: alt, left
jump_end_line: alt, right
copy_line: alt, c
insert_paste_line: alt, v
paste_replace_line: alt, p
arrow_up: up
arrow_down: down
arrow_left: left
arrow_right: right
delete: backspace
delete2: backspace
enter: enter
cancel_line: alt, รท

# Optional: map the shortcuts to snippets defined in the
# sections below to replace default evaluation
[shortcuts mapping]
cancel_line: cancel_line
delete_line: delete_line
delete: delete
delete2: delete2
eval_manual: eval_manual
eval_manual2: eval_manual2
jump_start: jump_start
jump_end: jump_end
jump_start_line: jump_start_line
jump_end_line: jump_end_line
copy_line: copy_line
insert_paste_line: insert_paste_line
paste_replace_line: paste_replace_line
enter: enter
arrow_up: arrow_up
arrow_down: arrow_down
arrow_left: arrow_left
arrow_right: arrow_right

# simple alphanumeric & commands 1-1 mapping used in
# Motippets module and evaluation shortcut
[Motippets]
66: motippetssc-evaluate

# midi note register limits (21 <= mid_low is low register,
# between mid_low and mid_hi is mid register, > mid_hi is hi)
[Motippets register division]
mid_low: 44
mid_hi: 78

[chordal main motifs midi]
set_tempo: 79, 84, 87, 84, 87, 79
#jump_start: 99, 102, 103
#arrow_up: 91, 90, 87


# can only call this once !!!- not anymore!!!
[melodic main motifs midi]
set_scale: 60, 62, 63, 65, 67, 68, 71, 72, 71, 68, 67, 65, 63, 62, 60, 62, 63, 65, 67, 68, 71, 72








# ======================================================
# Conditional Motifs !!! IGNORE FOR NOW !!!

[chordal conditional motifs midi]

[melodic conditional motifs midi]
conditional_2: 48, 51, 55, 60, 67, 72, 75
conditional_3: 75, 72, 67, 63, 60, 55, 48
conditional_1: 79, 84, 87, 91, 90
conditional_4: 31, 36, 39, 43, 42

[chordal conditional results motifs midi]
conditional_result_2: 23,24,25
conditional_result_loop_stop: 36, 39, 43

[melodic conditional results motifs midi]
conditional_result_3: 68,74,74,63,69
conditional_result_gomb: 41, 40, 38, 36, 35, 33, 31, 29, 28, 26, 24, 23, 21
conditional_result_5: 26,23,23
conditional_result_hat: 96, 93, 94, 95, 96, 93, 94, 95, 96, 93, 99
conditional_result_visuals: 96, 97, 97, 97


# ======================================================
# Melodic Motifs
# > Anne sets motifs

[melodic mini motifs]
tone_mel3: 98, 91, 96, 99
bell_time: 31, 32, 36, 39, 31, 32, 24
set_volume: 55, 60, 62
# Sawtooth bass pulse - eventually a trem as well
set_bass_wave: 38, 37, 39, 38, 37, 37
set_bass_lfo_value: 38, 40, 39, 38, 38
delay_set: 70, 70, 70, 70
time_set: 71, 71, 71, 71
speed_set: 72, 72, 72, 72
reverb_set: 37, 37, 37, 37
lfo_set: 38, 38, 38, 38
gain_set: 39, 39, 39, 39
shape_set: 86, 86, 86, 86
time_set2: 83, 83, 83, 83

enter: 24, 24, 24, 36
new_bell: 39, 36, 31, 38, 32, 31, 39, 36, 38, 32, 31, 24, 24
new_kick: 92, 96, 91, 99, 92, 96, 91, 92, 87, 91, 92, 96, 91, 99, 91, 92, 87, 87, 91, 84
kick_beat: 32, 32, 32, 32, 32
kick_beat2: 44, 44, 44, 44, 44
set_kick_fotf: 56, 56, 56, 56, 56
tone_mel1: 98, 91, 96, 103, 99, 104, 96
delete: 60, 60, 60
delete2: 96, 96, 96
eval_manual: 87, 97, 99
eval_manual2: 37, 25, 27
cancel_line: 99, 99, 99, 103
arrow_left: 63, 66, 67, 60
arrow_right: 66, 67, 70, 72
new_bass: 24, 36, 32, 31
set_bass_lfo:	39, 38, 40, 39, 38, 38
delete_line: 72, 48, 60
copy_line: 95, 94, 96, 92, 95
insert_paste_line: 71, 70, 72, 68, 71
paste_replace_line: 35, 34, 36, 32, 35

# Tone arpy
new_tone: 55, 60, 63, 65, 67
set_tone_dly: 48, 49, 55
set_tone_shp: 48, 49, 56
tone_mel2: 98, 91, 96, 104, 99, 103, 96, 96

#jump_start: 99, 102, 103
#arrow_up: 87, 90, 91

#hat: 96, 93, 94, 95, 96, 93, 94, 95, 96, 93, 99
kill: 84, 96, 95, 92, 91, 89, 87, 86, 84
all: 24, 36, 35, 32, 31, 29, 27, 26, 24, 36, 24


[chordal mini motifs]
number: 60, 62, 67, 69


#moved from main motifs

arrow_up: 91, 90, 87
arrow_down: 43, 42, 39
jump_start_line: 67, 63, 66
jump_end_line: 66, 67, 70
jump_end: 31, 27, 30
jump_start: 99, 102, 103
set_bell: 39, 36, 31
set_kick: 92, 96, 91
set_tone: 60, 55, 67, 65, 63
set_hat:  96, 93, 94

# ======================================================
# Code Snippets
# > The output of the corresponding motif (unique names)

[snippets code output]
# corresponding code snippet with same name as in motifs

# Parameters that need to be changed with the scales
# time(), gain(), fx(delay <one-param>),
# fx(delayTime), fx(delayFb), speed()

# Global Settings
set_scale: set scale minor_harmonic c
set_tempo: set tempo 115
#mini_set_tempo: // set tempo

# Bell Soundscape
new_bell: new sample bowl_hi time(~15) gain(~6) speed(~1) fx(reverb 1.5 18) name(bell)
kill: kill
all: All

# still checkset_bell_verb: set bell fx(reverb 1.5 18)
set_bell_dly: set bell fx(delay 1/2 2/3 0.9)
# speed to 1
set_bell_spd: set bell speed(~9)
# lfo with 3/16th division
set_bell_lfo: set bell fx(lfo ~5 down)
# gain down
set_bell_gain: set bell gain(~1)

bell_time: // set bell time
set_bell: set bell
set_kick: set kick
set_tone: set tone
set_hat: set hat

# speed = 1/4, gain = 0.4
hat: new sample hat_min name(hat) time(~6 1/8) gain(~4)

# Kick heartbeat-ish
kick_beat: ring kickBeat hex(9000000)
new_kick: new sample kick_909 time(1/16) beat(kickBeat 2) name(kick)
kick_beat2: ring kickBeat hex(8890)
# set kick to four-on-the-floor
set_kick_fotf: set kick time(1/4) beat(1)

# Tone arpy
tone_mel1: ring melody sine(20 1 0 12)
# speed = 1 per bar, shape attack = 180ms, release = 1ms
new_tone: new synth sine note(melody 2) time(~9 1/16) shape(~7) name(tone)

# Delay time is ~ 3/16th
set_tone_dly: set tone fx(delay ~6)
# Set tone to sharper attack = 1ms release = 95ms
set_tone_shp: set tone shape(~5) time(~8 1/16)
tone_mel2: ring melody sine(20 11.2 0 24)
tone_mel3: // ring melody sine
number:
set_bass_lfo_value:
delay_set:
time_set:
speed_set:
reverb_set:
lfo_set:
gain_set:
shape_set:
time_set2:
set_volume: set


# Sawtooth bass pulse
new_bass: new synth saw shape(-1) time(2) fx(filter low 3 1400 90 0.4 0.5 0.1) name(bass)
set_bass_wave: set bass wave2(square 0.4993)
# set lfo speed to 1/4th
set_bass_lfo: set bass fx(lfo ~4 up)



#conditionals
conditional_1: //setting up a conditional: IF number of notes played is more than 100 in...
conditional_4: //setting up an ONGOING conditional: IF rnumber of notes playes is more than 150 in...
conditional_2: //setting up an ONGOING conditional: IF range is more than...
conditional_3: //setting up a conditional: IF range is less than...

# motif name : code, flag [osc | reset | gomb], [osc address | motif_name to reset], optional flag [grab_value | a value], optional flag [random1 | random2]
conditional_result_hat_comment:// if true -> start hat, if false -> stop hat
conditional_result_hat_true: new sample hat_min name(hat) time(~6 1/8) gain(~4)
conditional_result_hat_false: set hat gain(0)

conditional_result_visuals_comment:// if true -> start pillars, if false -> stop pillars
conditional_result_visuals_true: set visuals pillars 1
conditional_result_visuals_false: set visuals pillars 0

conditional_result_gomb_comment: Activate self-destruct mechanism
conditional_result_gomb_true: killAll, gomb
conditional_result_gomb_false: //nothing

conditional_result_loop_stop_comment: stop perpetual conditionals
conditional_result_loop_stop_true: //CODEKLAVIER loop_stop, loop_stop
conditional_result_loop_stop_false: //CODEKLAVIER loop still going

[snippets code output callback]
# motif_name : code output
# (code to be evaluated after the normal code output, for example: for unmapping)
# (duplicate names won't work!)
#mini_set_tempo: callback mini


[snippets special flags]
# motif name, flag [reset, ] , flag [motif_name to reset, ]
conditional_result_2_true: reset, motif_1
mini_set_pixel: callback mini

[motif counter]
playlimit: 10000

[snippets for tremolos]
# 4 values (also whitespace) separated by commas are allowed:
# the code expression to print, a prefix on the tremolo value, a suffix for the value, linear scaling in the form "minmax(x-y)"
# the code expression is required at least. scaling should ALWAYS be the last value if used
# example:
# myvar = ,( , ),minmax(0-100)
# will result in myvar = ( 30 )
# example 2:
# myvar =,minmax(0-100)
# will result in myvar = 30
#mini_set_tempo: set tempo,(,)
time_test: time,[,]
tone_mel3: ring melody sine,(,)
bell_time: set bell time,(,)
number:,
set_bass_lfo_value: set bass fx(lfo ~,, up)
delay_set: fx(delay ~,,)
time_set:time(~,,)
speed_set:speed(~,,)
reverb_set: fx(reverb 0.8 ~,,)
lfo_set: fx(lfo ~,,)
gain_set: gain(~,,)
shape_set: shape(~,,)
time_set2: time(~,, 1/16)
set_volume: volume 0.,, 5000



[conditionals settings]
#name : type [note_count, range_more_than, range_less_than], [perpetual (true | false): 1 | 0], optional settings [totalnotes, ]
conditional_1: note_count, 0, 100
conditional_2: range_more_than, 1
conditional_3: range_less_than, 0
conditional_4: note_count, 1, 150

# make volume,

[motippets display settings]
#motif_name : display column id
#mini_set_tempo: 2
time_test: 2
tone_mel3: 2
bell_time: 2
number: 2
set_bass_lfo_value: 2
delay_set: 2
time_set: 2
time_set2: 2
speed_set: 2
reverb_set: 2
lfo_set: 2
gain_set: 2
set_volume: 2


[motippets random limits]
# name : bottom limit, upper limits.
random: 59, 61
random1: 1, 80
random2: -2, 10
# NOTE: random is also used for range_couner conditional limits
# random2 multiplies by a value extracted from the function where it is used

[ckalculator]
shift: off
wrong_note_tolerance: 1

[lambda]
# lambda function : midi number mapped to the function
evaluate_function: 59
identity_midi: 23
select_first_midi: 0
select_second_midi: 0
successor_midi: 83, 95
predecessor_midi: 0
add_midi: 107
subtract_midi: 71
mult_midi: 0
division_midi: 0
greater_than_midi: 47
equality_midi: 35
less_than_midi: 0

[articulation]
# articulation name : threshold in seconds
chord: 0.02
staccato: 0.35
sostenuto: 0.8
