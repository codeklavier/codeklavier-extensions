[midi]
# midi options of the device to use
port: 2

#IAC driver loopback:
#noteon_id: 144

#M-audio midi controller:
#noteon_id: 152
#noteoff_id: 128
#pedal_id: 184
#pedal_midi_sostenuto: 7

#Yamaha Clavinova:
noteon_id: 144
noteoff_id: 128
pedal_id: 176
pedal_midi_sostenuto: 66

#Casio keyboard:
#pedal_midi_sostenuto: 67


[Hello World]
# simple alphanumeric & commands 1-1 mapping used Hello World module
# midinumber  :  alphanumeric or command mapping
22: A
108: down
toggle: 107
toggle_callback: none


[shortcuts]
# 1 or two keys that can be pressed.
# first keys remain pressed, last key is pressed and released.
# (At least "eval" should always be present)
eval: none
eval_manual_one: ctrl, enter
eval_block: alt, enter
eval_manual_all: ctrl, shift, enter
comment_line: ctrl_l, /
begin_line: ctrl, รท
end_line: ctrl, e
hide_code: ctrl, shift, h
up: up
down: down
left: left
right: right
delete: backspace
delete_line: ctrl, k
backspace: backspace
selectall: cmd, a
enter: enter
enter2: enter


[shortcuts mapping]
# Optional: map the shortcuts to snippets defined in the sections below to replace default evaluation
eval: eval
eval_manual_one: eval_manual_one
eval_block: eval_block
eval_manual_all: eval_manual_all
comment_line: comment_line
hide_code: hide_code
up: up
down: down
delete: delete
backspace: backspace
selectall: selectall
enter: enter
begin_line: begin_line
delete_line: delete_line
enter2: enter2
end_line: end_line
left: left
right: right


[Motippets]
# simple alphanumeric & commands 1-1 mapping used in Motippets module
66: motippetssc-evaluate

[Motippets register division]
# midi note register limits (21 <= mid_low is low register, between mid_low and mid_hi is mid register, > mid_hi is hi)
mid_low: 44
mid_hi: 69

[chordal main motifs midi]
shape: 60, 64, 67

[melodic main motifs midi]
motif1: 74, 76, 74, 73
motif2: 77, 72, 72, 74, 76, 77, 79, 76, 74, 72, 77, 77, 79, 81, 79


#mix


[chordal conditional motifs midi]
conditional_1: 25, 27, 30

[melodic conditional motifs midi]
conditional_2: 37, 33, 36, 37, 31

[chordal conditional results motifs midi]
conditional_result_3: 21,22,23

[melodic conditional results motifs midi]
conditional_result_1: 98, 97, 94, 93, 91, 89, 91, 93

[melodic mini motifs]
motif1a: 74, 76, 70, 76
motif1b: 60, 60, 60, 60
motif1c: 77, 74, 74, 79
#motif1d: 77, 77, 81
motif1e: 73, 74, 76, 76, 76, 76, 72
motif1f: 77, 77, 77, 79
motif1g: 81, 74, 74, 73, 74

eval_manual_one: 26, 32, 26
eval_block: 38, 26, 38
eval_manual_all: 38, 44, 38
comment_line: 91, 93, 89
begin_line: 31, 33, 29
end_line: 79, 81, 77
hide_code: 50, 57, 62, 57, 50
up: 98, 98, 99
down: 38, 38, 39
delete: 26, 25, 26
backspace: 1
delete_line: 98, 97, 98
mini_motif1sp: 74, 76, 81, 74
mini_motif1spn: 55, 50, 57, 55
mini_motif1fq: 88, 89, 90, 91, 92, 93
mini_motif1no: 62, 65, 67, 62, 69
mini_motifspc: 74, 77, 79, 74, 81
mini_motifsic: 50, 53, 55, 50, 57

mini_motif1b: 33, 37, 33, 39
mini_motif1c: 45, 49, 45
mini_motif1d: 57, 61, 57, 63
mini_motif1e: 81, 73, 81, 75
mini_motif1f: 93, 85, 93, 87
selectall: 26, 27, 26
enter: 26, 33, 38
enter2: 62, 69, 57
add1: 69, 62, 61
min1: 57, 50, 49
mult2: 79, 74, 73
mult3: 91, 86, 85
div2: 43, 38, 37
div3: 31, 26, 25

mini_motif3a: 1
mini_motif3b: 1
mini_motif3c: 1

#mix
motif3a: 1
motif3b: 1
motif3c: 1
motif3d: 1
#KALEID
motif3e: 1
motif3f: 1
motif3g: 1
motif3h: 1
#MODULATION
motif3i: 1
motif3j: 1
motif3k: 1
motif3l: 1
motif3m: 1


hush: 81, 79, 77, 76, 74, 72, 70, 74, 76, 75, 74
[chordal mini motifs]
left: 50, 53, 57
right: 81, 74, 77

[snippets code output]
# motif_name : code output
# (in this case supercollider)
# (duplicate names won't work!)

#PART 1
mini_motif1sp: speed = 1
mini_motif1spn: speed = -1
mini_motif1fq: oscF = () => 80
mini_motif1no: noiseV= ()=> 0.31
mini_motifspc: speedC= ()=> 0.31
mini_motifsic: sizeC= ()=> 0.31

mini_motif1b: mix1b= () => 0.049
mini_motif1c: mix1c= () => 0.25
mini_motif1d: mix1d= () => 0.3
mini_motif1e: mix1e= () => 0.15
mini_motif1f: mix1f= () => 0.15

add1: +1.3
min1: -1.3
mult2: *2
mult3: *3.1
div2: /2
div3: /3.1


motif1: solid().add(a1(), 0.9).add(a2(), 0.7).add(a2b(), 0.4).blend(a3().luma(0.8), 0.4).blend(a4().scale(1.09), 0.5).add(a4().scale(1.01), 0.125).add(a4().luma(0.9).thresh().modulateScale(a1()), 0.125).add(a4().posterize(1, 16).mult(osc(2).rotate(1.57)).modulateScale(a2b()), 0.8).mult(solid(0, 0, 1), 0.55).add(solid(1, 1, 1).luma(), 0.2).contrast(1.4).out(o1);
motif2: osc(oscF(), 0.025).modulate(noise(noiseV())).out(o2);

#mix
motif1a: solid()
motif1b: .add(src(o1)).blend(src(o2),mix1b())
motif1c: .add(shape(300,0.15,sizeC()).modulate(noise(noiseV(),speedC())),mix1c())
#motif1d:
motif1e: .mult(fadeC(),mix1e())
motif1f: .mult(src(o2).modulate(noise(1,0.15).scale(0.02,0.2),[0,0.5,1,0.7,0.5,0].smooth(0.9).fast(0.15),0),mix1f())
motif1g: .out()

#PART 2
motif2a: solid().add(src(o1),0.5).add(shape(300,0.15,[0.05,0.5,0.9,1.5,2].smooth(1).fast(0.02)).color(0,0,[0,0.25,0.5,1,1,1].smooth(0.9)),mix1c()*4).out()


#PART 3
mini_motif3a: size=()=> 0.8
mini_motif3b: r=()=> 4
mini_motif3c: texture= ()=> 0.3

#mix
motif3a: solid()
motif3b: .add(bb().scale(1.05).rotate(1.07),[0.4,0.2].smooth(0.9).fast(0.04),0.08).scrollX(posA(),-posB()).scrollY(-posA(),posB())
motif3c: //.add(bw()).blend(bb(),0.25).blend(src(o0).scale(1.01),[0.4,0.8].smooth(0.9).fast(0.03)).scrollX(posA(),-posB()).scrollY(posA(),posB())
motif3d: //.blend(src(o0).scrollY(0.15,-0.035).scale(4).mult(seq()),[0.4,0.2].smooth(0.9).fast(0.03))
#KALEID
motif3e: //.kaleid(3)
motif3f: //.mult(bl(),[0.2,0].smooth(0.99).fast(0.02))
motif3g: //.mult(gk().scale(0.4).luma(),0.35)
motif3h: //.blend(gk(),0.025)
#MODULATION
motif3i: //.modulate(noise(1,-0.025),0.25)
motif3j: //.modulate(gk().scale(8).rotate(()=>time/32))
motif3k: //.scale(size())
motif3l: //.contrast(1.7).saturate(1.5)
motif3m: .out()


hush: hush()


#conditionals
conditional_1: setting up a conditional: IF number of notes played is more than 100 in...
conditional_2: setting up an ONGOING conditional: IF range is more than...
conditional_3: setting up an ONGOING conditional: IF range is less than...
conditional_4: setting up an ONGOING conditional: IF number of notes played is more than 150 in...
conditional_5: setting up a conditional: IF number of notes played is more than 50 in...

# motif name : code, flag [osc | gomb], optional flag [osc address], optional flag [grab_value | a value], optional flag [random, random1 | random2]
conditional_result_1_comment: solid().layer(shape(3,tSize(),diffuse()).mult(solid(1,0.5,0.2)).add(shape(4,2),0)).layer(solid(1,0.5,0.2,orange())).scale(0.25).out()
conditional_result_1_true: hush(), gomb
conditional_result_1_false: FAIL

[snippets code output callback]
# motif_name : code output
# (code to be evaluated after the normal code output, for example: for unmapping)
# (duplicate names won't work!)

[snippets special flags]
# motif name, flag [reset, ] , flag [motif_name to reset, ]


[motif counter]
playlimit: 100

[snippets for tremolos]
#discuss with Seb good upper and lower values
mini_motif1sp: speed = ,,,minmax(0.3-3)
mini_motif1spn: speed = -,,,minmax(0.3-3)
mini_motif1fq: oscF = () => ,,,minmax(4-100)
mini_motif1no: noiseV= ()=> ,,;,minmax(0.01-2)
mini_motifspc: speedC = -,,,minmax(0.3-90)
mini_motifsic: sizeC = -,,,minmax(0.3-90)

mini_motif1b: mix1b= ()=> ,,;,minmax(0.1-1)
mini_motif1c: mix1c= ()=> ,,;,minmax(0.1-1)
mini_motif1d: mix1d= ()=> ,,;,minmax(0.1-1)
mini_motif1e: mix1e= ()=> ,,;,minmax(0.1-1)
mini_motif1f: mix1f= ()=> ,,;,minmax(0.1-1)

[conditionals settings]
#name : type [note_count, range_more_than, range_less_than], [perpetual (true | false): 1 | 0], optional settings [totalnotes, ]
conditional_1: note_count, 0, 100
conditional_2: range_more_than, 1
conditional_3: range_less_than, 1
conditional_4: note_count, 1, 150
conditional_5: note_count, 0, 50

# make volume,

[motippets display settings]
#motif_name : display column id
mini_motif1sp: 2
mini_motif1spn: 2
mini_motif1fq: 2
mini_motif1no: 2
mini_motifsic: 2
mini_motifspc: 2
mini_motif1b: 2
mini_motif1c: 2
mini_motif1d: 2
mini_motif1e: 2
mini_motif1f: 2


[motippets random limits]
# name : bottom limit, upper limits.
random: 10, 20
random1: 1, 80
random2: -2, 10
#NOTE: random2 multiplies by a value extracted from the function where it is used

[ckalculator]
shift: off
wrong_note_tolerance: 1

[lambda]
# lambda function : midi number mapped to the function
evaluate_function: 59
identity_midi: 23
select_first_midi: 0
select_second_midi: 0
successor_midi: 83, 95
predecessor_midi: 0
add_midi: 107
subtract_midi: 71
mult_midi: 0
division_midi: 0
greater_than_midi: 47
equality_midi: 35
less_than_midi: 0

[articulation]
# articulation name : threshold in seconds
chord: 0.02
staccato: 0.35
sostenuto: 0.8

[easter eggs]
# midinumber  :  easteregg text


[ar]
