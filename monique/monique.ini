[midi]
# midi options of the device to use
port: 1

#IAC driver loopback:
#noteon_id: 144

#M-audio midi controller:
#noteon_id: 152
#noteoff_id: 128
#pedal_id: 184
#pedal_midi_sostenuto: 7

#Yamaha Clavinova:
noteon_id: 144
noteoff_id: 144
pedal_id: 176
pedal_midi_sostenuto: 66

#Casio keyboard:
#pedal_midi_sostenuto: 67


[Hello World]
# simple alphanumeric & commands 1-1 mapping used Hello World module
# midinumber  :  alphanumeric or command mapping
21: enter
24: c
35: d
36: h
37: a
38: l
39: o
41: s
42: k
44: w
45: t
46: r
48: m
51: n
52: l
53: a
54: p
56: v
57: i
60: e
25: space
27: backspace
toggle: 108
toggle_callback: none


[shortcuts]
# 1 or two keys that can be pressed.
# first keys remain pressed, last key is pressed and released.
# (At least "eval" should always be present)
eval: enter
up: up
down: down
left: left
right: right
delete: backspace
backspace: backspace
selectall: cmd, a
enter: enter
undo: ctrl, z


[shortcuts mapping]
# Optional: map the shortcuts to snippets defined in the sections below to replace default evaluation
eval: eval
up: up
down: down
delete: delete
backspace: backspace
selectall: selectall
enter: enter
left: left
right: right
undo: undo


[Motippets]
# simple alphanumeric & commands 1-1 mapping used in Motippets module
66: motippetssc-evaluate

[Motippets register division]
# midi note register limits (21 <= mid_low is low register, between mid_low and mid_hi is mid register, > mid_hi is hi)
mid_low: 38
mid_hi: 74

[chordal main motifs midi]
block1: 48, 55, 62, 64, 72

[melodic main motifs midi]


[chordal conditional motifs midi]


[melodic conditional motifs midi]


[chordal conditional results motifs midi]


[melodic conditional results motifs midi]


[melodic mini motifs]

[chordal mini motifs]
# hi register
block10: 79, 86, 93, 95
block12: 81, 83, 85, 88, 93

# mid register
block2: 50, 55, 62, 69, 71
block3: 45, 54, 62, 64, 69

block4: 48, 53, 60, 67, 69
block5: 43, 52, 60, 62, 67
block6: 43, 50, 57, 59, 67

block7: 53, 58, 65, 72, 74
block8: 48, 57, 65, 67, 72

block13: 47, 56, 64, 66, 71
block14: 47, 54, 61, 63, 71
block15: 49, 54, 61, 68, 70

block17: 47, 52, 59, 66, 68
block18: 42, 51, 59, 61, 66

block23: 42, 49, 56, 58, 66
block24: 44, 49, 56, 63, 65

block25: 51, 56, 63, 70, 72
block26: 46, 55, 63, 65, 70
block27: 46, 53, 60, 62, 70

block28: 44, 53, 61, 63, 68
block29: 44, 51, 58, 60, 68
block30: 46, 51, 58, 65, 67

block33: 39, 48, 56, 58, 63

block35: 41, 50, 58, 60, 65
block36: 41, 48, 55, 57, 65

[snippets code output]
# motif_name : code output
# (in this case supercollider)
# (duplicate names won't work!)

block1: black(); shape=1; totalShapesUpdate();
block2: square()
block3: square()

block4: shape = 2; totalShapesUpdate();
block5: shape = 3; totalShapesUpdate();
block6: color();

block7: shape = 4; totalShapesUpdate();
block8: shape = 5; totalShapesUpdate();

block10: "naar beneden"
block12: "naar boven"

block13: chord 13
block14: chord 14
block15: chord 15

block17: chord 17
block18: chord 18

block19: chord 19
block20: chord 20
block21: chord 21

block23: chord 23
block24: chord 24

block25: chord 25
block26: chord 26
block27: chord 27

block28: chord 28
block29: chord 29
block30: chord 30

block33: chord 33

block35: chord 35
block36: chord 36

#conditionals

# motif name : code, flag [osc | gomb], optional flag [osc address], optional flag [grab_value | a value], optional flag [random, random1 | random2]

[snippets code output callback]
# motif_name : code output
# (code to be evaluated after the normal code output, for example: for unmapping)
# (duplicate names won't work!)

[snippets special flags]
# motif name, flag [reset, ] , flag [motif_name to reset, ]


[motif counter]
playlimit: 100

[snippets for tremolos]
block2: x[shape] = x[shape] +
block3: x[shape] = x[shape] -
block10: y[shape] = y[shape] +
block12: y[shape] = y[shape] -

[conditionals settings]
#name : type [note_count, range_more_than, range_less_than], [perpetual (true | false): 1 | 0], optional settings [totalnotes, ]


[motippets display settings]
#motif_name : display column id

[motippets random limits]
# name : bottom limit, upper limits.
random: 10, 20
random1: 1, 80
random2: -2, 10
#NOTE: random2 multiplies by a value extracted from the function where it is used

[ckalculator]
shift: off
wrong_note_tolerance: 1

[lambda]
# lambda function : midi number mapped to the function
evaluate_function: 59
identity_midi: 23
select_first_midi: 0
select_second_midi: 0
successor_midi: 83, 95
predecessor_midi: 0
add_midi: 107
subtract_midi: 71
mult_midi: 0
division_midi: 0
greater_than_midi: 47
equality_midi: 35
less_than_midi: 0

[articulation]
# articulation name : threshold in seconds
chord: 0.02
staccato: 0.35
sostenuto: 0.8

[easter eggs]
# midinumber  :  easteregg text


[ar]
